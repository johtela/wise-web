Html/Element«import«Data/Dictionary¸ Html/Collection¸ Html/Event¸ Css/Style¸ Html/Node»¸ ---«"# Nodes and Elements

This module defines the Element types in DOM. These act as a direct interface to DOM for Wise programs."»¸ type«---«"## Attr

The Attr interface represents one of an element's attributes as an object. In most situations¸ you will directly retrieve the attribute value as a string (e.g.¸ `Element.getAttribute()`)¸ but some cases may require interacting with Attr instances (e.g.¸ `Element.getAttributeNode()`)."»¸ object«Attr¸ extends«Node»¸ localName«String¸ get»¸ name«String¸ get»¸ namespaceURI«?«String»¸ get»¸ ownerElement«?«Element»»¸ prefix«?«String»¸ get»¸ specified«Bool¸ get»¸ value«String¸ get¸ set»»¸ ---«"## DOMRect

A DOMRect describes the size and position of a rectangle.

The type of box represented by the DOMRect is specified by the method or property that returned it. For example¸ `Range.getBoundingClientRect()` specifies the rectangle that bounds the content of the range using such objects."»¸ object«DOMRect¸ x«Number»¸ y«Number»¸ width«Number»¸ height«Number»»¸ ---«"## Element


Element is the most general base class from which all element objects (i.e. objects that represent elements) in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element."»¸ object«Element¸ attributes«NamedMap«Attr»¸ get»¸ childElementCount«Number¸ get»¸ children«NamedCollection«Element»¸ get»¸ classList«DOMTokenList¸ get»¸ className«string¸ get¸ set»¸ clientLeft«Number¸ get»¸ clientTop«Number¸ get»¸ clientHeight«Number¸ get»¸ clientWidth«Number¸ get»¸ firstElementChild«?«Element»¸ get»¸ id«String¸ get»¸ innerHTML«String¸ get¸ set»¸ innerText«String¸ get¸ set»¸ lastElementChild«?«Element»¸ get»¸ localName«String¸ get»¸ namespaceURI«?«string»¸ get»¸ nextElementSibling«?«Element»»¸ outerHTML«String¸ get¸ set»¸ part«DOMTokenList¸ get»¸ prefix«String¸ get¸ set»¸ previousElementSibling«?«Element»»¸ scrollHeight«Number¸ get»¸ scrollWidth«Number¸ get»¸ scrollLeft«Number¸ get¸ set»¸ scrollTop«Number¸ get¸ set»¸ slot«?«String»¸ get»¸ tagName«String¸ get»¸ after«->«...«Node»¸ Unit»»¸ append«->«...«Node»¸ Unit»»¸ before«->«...«Node»¸ Unit»»¸ checkVisibility«->«?«{«contentVisibilityAuto«Bool»¸ opacityProperty«Bool»¸ visibilityProperty«Bool»»»¸ Bool»»¸ closest«->«String¸ ?«Element»»»¸ getAttribute«->«String¸ ?«String»»»¸ getAttributeNames«[«String»»¸ getAttributeNode«->«String¸ ?«Attr»»»¸ getAttributeNodeNS«->«String¸ String¸ ?«Attr»»»¸ getAttributeNS«->«String¸ String¸ ?«String»»»¸ getBoundingClientRect«DOMRect»¸ getClientRects«CollectionBase«DOMRect»»¸ getElementsByClassName«->«String¸ NamedCollection«Element»»»¸ getElementsByTagName«->«String¸ NamedCollection«Element»»»¸ getElementsByTagNameNS«->«String¸ String¸ NamedCollection«Element»»»¸ getHTML«String»¸ hasAttribute«->«String¸ Bool»»¸ hasAttributeNS«->«String¸ String¸ Bool»»¸ hasAttributes«Bool»¸ hasPointerCapture«->«Number¸ Bool»»¸ insertAdjacentElement«->«String¸ Element¸ Element»»¸ insertAdjacentHTML«->«String¸ String¸ Unit»»¸ insertAdjacentText«->«String¸ String¸ Unit»»¸ matches«->«String¸ Bool»»¸ prepend«->«...«Node»¸ Unit»»¸ querySelector«->«String¸ Element»»¸ querySelectorAll«->«String¸ NodeList«Element»»»¸ releasePointerCapture«->«Number¸ Unit»»¸ remove«Unit»¸ removeAttribute«->«String¸ Unit»»¸ removeAttributeNode«->«Attr¸ Attr»»¸ removeAttributeNS«->«String¸ String¸ Unit»»¸ replaceChilren«->«...«Node»¸ Unit»»¸ replaceWith«->«...«Node»¸ Unit»»¸ scroll«->«{«top«Number»¸ left«Number»¸ behavior«String»»¸ Unit»»¸ scrollBy«->«{«top«Number»¸ left«Number»¸ behavior«String»»¸ Unit»»¸ scrollIntoView«->«{«behavior«String»¸ block«String»¸ inline«String»»¸ Unit»»¸ scrollTo«->«{«top«Number»¸ left«Number»¸ behavior«String»»¸ Unit»»¸ setAttribute«->«String¸ String¸ Unit»»¸ setAttributeNode«->«Attr¸ Attr»»¸ setAttributeNodeNS«->«Attr¸ Attr»»¸ setAttributeNS«->«String¸ String¸ String¸ Unit»»¸ setPointerCapture«->«Number¸ Unit»»¸ toggleAttribute«->«String¸ Bool»»¸ onbeforeinput«EventListener«InputEvent«Element»»¸ get¸ set»¸ onblur«EventListener«FocusEvent«Element»»¸ get¸ set»¸ onclick«EventListener«MouseEvent«Element»»¸ get¸ set»¸ oncontextmenu«EventListener«MouseEvent«Element»»¸ get¸ set»¸ oncopy«EventListener«ClipboardEvent«Element»»¸ get¸ set»¸ oncut«EventListener«ClipboardEvent«Element»»¸ get¸ set»¸ ondblclick«EventListener«MouseEvent«Element»»¸ get¸ set»¸ onfocus«EventListener«FocusEvent«Element»»¸ get¸ set»¸ ongotpointercapture«EventListener«MouseEvent«Element»»¸ get¸ set»¸ oninput«EventListener«InputEvent«Element»»¸ get¸ set»¸ onkeydown«EventListener«KeyboardEvent«Element»»¸ get¸ set»¸ onkeyup«EventListener«KeyboardEvent«Element»»¸ get¸ set»¸ onlostpointercapture«EventListener«MouseEvent«Element»»¸ get¸ set»¸ onmousedown«EventListener«MouseEvent«Element»»¸ get¸ set»¸ onmouseenter«EventListener«MouseEvent«Element»»¸ get¸ set»¸ onmouseleave«EventListener«MouseEvent«Element»»¸ get¸ set»¸ onmousemove«EventListener«MouseEvent«Element»»¸ get¸ set»¸ onmouseout«EventListener«MouseEvent«Element»»¸ get¸ set»¸ onmouseover«EventListener«MouseEvent«Element»»¸ get¸ set»¸ onmouseup«EventListener«MouseEvent«Element»»¸ get¸ set»¸ onpaste«EventListener«ClipboardEvent«Element»»¸ get¸ set»¸ onscroll«EventListener«Event«Element»»¸ get¸ set»¸ onwheel«EventListener«WheelEvent«Element»»¸ get¸ set»»¸ ---«"## HTMLElement

The HTMLElement interface represents any HTML element. Some elements directly implement this interface¸ while others implement it via an interface that inherits it."»¸ object«HTMLElement¸ extends«Element»¸ accessKey«String¸ get¸ set»¸ accessKeyLabel«String¸ get»¸ autoFocus«Bool¸ get¸ set»¸ contentEditable«String¸ get¸ set»¸ dataset«Dictionary«String»¸ get»¸ dir«String¸ get¸ set»¸ draggable«Bool¸ get¸ set»¸ enterKeyHint«String¸ get¸ set»¸ hidden«Bool¸ get¸ set»¸ inert«Bool¸ get¸ set»¸ inputMode«String¸ get¸ set»¸ isContentEditable«Bool¸ get»¸ lang«String¸ get¸ set»¸ nonce«String¸ get¸ set»¸ offsetHeight«Number¸ get»¸ offsetLeft«Number¸ get»¸ offsetParent«Element¸ get»¸ offsetTop«Number¸ get»¸ offsetWidth«Number¸ get»¸ outerText«String¸ get¸ set»¸ spellCheck«Bool¸ get¸ set»¸ style«CSSStyleDeclaration¸ get»¸ tabIndex«Number¸ get¸ set»¸ title«String¸ get¸ set»¸ translate«Bool¸ get¸ set»¸ blur«Unit»¸ click«Unit»¸ focus«Unit»¸ hidePopover«Unit»¸ showPopover«Unit»¸ togglePopover«->«Bool¸ Bool»»¸ onbeforetoggle«EventListener«ToggleEvent«HTMLElement»»»¸ onchange«EventListener«Event«HTMLElement»»»¸ ondrag«EventListener«DragEvent«HTMLElement»»»¸ ondragend«EventListener«DragEvent«HTMLElement»»»¸ ondragleave«EventListener«DragEvent«HTMLElement»»»¸ ondragover«EventListener«DragEvent«HTMLElement»»»¸ ondragstart«EventListener«DragEvent«HTMLElement»»»¸ ondrop«EventListener«DragEvent«HTMLElement»»»¸ onerror«EventListener«UIEvent«HTMLElement»»»¸ onload«EventListener«Event«HTMLElement»»»¸ ontoggle«EventListener«ToggleEvent«HTMLElement»»»»¸ ---«"## HTMLHeadElement

The HTMLHeadElement interface contains the descriptive information¸ or metadata¸ for a document. This object inherits all of the properties and methods described in the HTMLElement interface."»¸ object«HTMLHeadElement¸ extends«HTMLElement»»¸ ---«"## HTMLBodyElement


All members of HTMLBodyElement are deprecated so the definitions is empty."»¸ object«HTMLBodyElement¸ extends«HTMLElement»»¸ ---«"## HTMLScriptElement

HTML `<script>` elements expose the HTMLScriptElement interface¸ which provides special properties and methods for manipulating the behavior and execution of `<script>` elements.

JavaScript files should be served with the `text/javascript` MIME type¸ but browsers are lenient and block them only if the script is served with an image type (`image/*`)¸ video type (`video/*`)¸ audio type (`audio/*`)¸ or `text/csv`. If the script is blocked¸ its element receives an error event; otherwise¸ it receives a load event."»¸ object«HTMLScriptElement¸ extends«HTMLElement»¸ async«Bool¸ get¸ set»¸ crossOrigin«String¸ get¸ set»¸ defer«Bool¸ get¸ set»¸ fetchPriority«String¸ get¸ set»¸ integrity«String¸ get¸ set»¸ noModule«Bool¸ get¸ set»¸ referrerPolicy«String¸ get¸ set»¸ src«String¸ get¸ set»¸ text«String¸ get¸ set»¸ type«String¸ get¸ set»¸ supports«->«String¸ Bool»¸ static»»¸ ---«"## HTMLImageElement

The HTMLImageElement interface represents an HTML `<img>` element¸ providing the properties and methods used to manipulate image elements."»¸ object«HTMLImageElement¸ extends«HTMLElement»¸ alt«String¸ get¸ set»¸ complete«Bool¸ get»¸ crossOrigin«String¸ get¸ set»¸ currentSrc«String¸ get»¸ decoding«String¸ get¸ set»¸ fetchPriority«String¸ get¸ set»¸ height«Number¸ get¸ set»¸ isMap«Bool¸ get¸ set»¸ loading«String¸ get¸ set»¸ naturalHeight«Number¸ get»¸ naturalWidth«Number¸ get»¸ referrerPolicy«String¸ get¸ set»¸ sizes«String¸ get¸ set»¸ src«String¸ get¸ set»¸ srcset«String¸ get¸ set»¸ useMap«String¸ get¸ set»¸ width«Number¸ get¸ set»¸ x«Number¸ get»¸ y«Number¸ get»¸ decode«Promise«Unit»»»¸ ---«"## HTMLEmbedElement

The HTMLEmbedElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating `<embed>` elements."»¸ object«HTMLEmbedElement¸ extends«HTMLElement»¸ height«String¸ get¸ set»¸ src«String¸ get¸ set»¸ type«String¸ get¸ set»¸ width«String¸ get¸ set»¸ getSVGDocument«Document»»¸ ---«"## HTMLSlotElement

The HTMLSlotElement interface of the Shadow DOM API enables access to the name and assigned nodes of an HTML `<slot>` element."»¸ object«HTMLSlotElement¸ extends«HTMLElement»¸ name«String¸ get¸ set»¸ assign«->«...«Node»¸ Unit»»¸ assignedElements«->«{«flatten«Bool»»¸ [«Element»»»¸ assignedNodes«->«{«flatten«Bool»»¸ [«Node»»»¸ onslotchange«EventListener«Event«HTMLSlotElement»»»»¸ object«Text¸ assignedSlot«?«HTMLSlotElement»¸ get»»¸ data«ElemAttr¸ |«.attr«String¸ String»¸ .event«String¸ EventListener«Element»»»»»¸ define«_body«Element¸ asm«`document.body`»»¸ _createElement«->>«String¸ Element»¸ ->>«name¸ asm«`document.createElement(`¸ name¸ `)`»»»¸ _createTextNode«->>«text¸ asm«`document.createTextNode(`¸ text¸ `)`»»»¸ setElemAttrs«->«Element¸ [«ElemAttr»¸ Unit»¸ ->«element¸ attributes¸ @traverse«attributes¸ ->>«attr¸ i¸ match«attr¸ |«.attr«name¸ value»¸ Element:«.setAttribute«element¸ name¸ value»»»¸ |«.event«ev¸ listen»¸ Element:«.addEventListener«element¸ ev¸ listen»»»»»»»»¸ elem«->«String¸ [«ElemAttr»¸ [«Element»¸ Element»¸ ->«name¸ attrs¸ children¸ do«let«res¸ _createElement«name»»¸ setElemAttrs«res¸ attrs»¸ Element:«.append«res¸ ...«_cast«children¸ Element:«>Node»»»»»¸ res»»»¸ textElem«->«name¸ attrs¸ text¸ do«let«res¸ _createElement«name»»¸ setElemAttrs«res¸ attrs»¸ Element:«.textContent.set«res¸ text»»¸ res»»»»»