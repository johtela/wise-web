Html/Element«import«Data/Array, Data/Iterator», ---«"# DOM Integration

This module defines the types of the HTML Document Object Model. These act as a direct interface to DOM for Wise programs."», type«---«"## Collections"», object«CollectionBase«a», length«Number, get», item«->«Number, a»»», object«NamedCollection«a», extends«CollectionBase«a»», namedItem«->«String, ?«a»»»», object«NodeList«a», extends«CollectionBase«a»», entries«Iterable«(«Number, a»»», keys«Iterable«Number»», values«Iterable«a»», forEach«->«->«a, Number, Unit», Unit»»», object«DOMTokenList, extends«NodeList«String»», value«String, get», add«->«[«String», Unit»», contains«->«String, Bool»», remove«->«[«String», Unit»», replace«->«String, String, Bool»», toggle«->«String, Bool»»», object«NamedMap«a», extends«CollectionBase«a»», getNamedItem«->«String, a»», setNamedItem«->«a, ?«a»»», removeNamedItem«->«String, a»», getNamedItemNS«->«String, String, a»», setNamedItemNS«->«a, ?«a»»», removeNamedItemNS«->«String, String, a»»», ---«"## Events

The Event interface represents an event which takes place on an EventTarget.

An event can be triggered by the user action e.g. clicking the mouse button or tapping keyboard, or generated by APIs to represent the progress of an asynchronous task. It can also be triggered programmatically, such as by calling the `HTMLElement.click()` method of an element, or by defining the event, then sending it to a specified target using `EventTarget.dispatchEvent()`.

There are many types of events, some of which use other interfaces based on the main Event interface. Event itself contains the properties and methods which are common to all events."», object«Event«a», bubbles«Bool, get», cancelBubble«Bool, get, set», cancelable«Bool, get», composed«Bool, get», currentTarget«?«a», get», defaultPrevented«Bool, get», eventPhase«Number, get», isTrusted«Bool, get», target«?«a», get», type«String, get», preventDefault«->«Unit, Unit»», stopImmediatePropagation«->«Unit, Unit»», stopPropagation«->«Unit, Unit»»», ---«"The EventTarget interface is implemented by objects that can receive events and may have listeners for them. In other words, any target of events implements the three methods associated with this interface."», alias«EventListener«a», ->«Event«a», Unit»», object«EventTarget, addEventListener«->«String, EventListener«a», Unit»», removeEventListener«->«String, EventListener«a», Unit»», dispatchEvent«->«Event«a», Bool»»», ---«"## Node

The DOM Node interface is an abstract base class upon which many other DOM API objects are based, thus letting those object types to be used similarly and often interchangeably. As an abstract class, there is no such thing as a plain Node object. All objects that implement Node functionality are based on one of its subclasses. Most notable are Document, Element, and DocumentFragment."», object«Node, extends«EventTarget», baseURI«String, get», childNodes«NodeList«Node», get», firstChild«?«Node», get», isConnected«Bool, get», lastChild«?«Node», get», nextSibling«?«Node», get», nodeName«String, get», nodeType«Number, get», nodeValue«?«String», get, set», ownerDocument«?«Document», get», parentNode«?«Node», get», parentElement«?«Element», get», previousSibling«?«Node», get», textContent«?«String», get, set», appendChild«->«Node, Node»», cloneNode«->«Bool, Node»», compareDocumentPosition«->«Node, Number»», contains«->«Node, Bool»», getRootNode«->«{«composed«Bool»», ?«Node»»», hasChildNodes«Bool», insertBefore«->«Node, Node, Node»», isDefaultNamespace«->«String, Bool»», isEqualNode«->«Node, Bool»», isSameNode«->«Node, Bool»», lookupPrefix«->«String, ?«String»»», lookupNamespaceURI«->«String, ?«String»»», normalize«Unit», removeChild«->«Node, Node»», replaceChild«->«Node, Node, Node»»», ---«"## Attr

The Attr interface represents one of an element's attributes as an object. In most situations, you will directly retrieve the attribute value as a string (e.g., `Element.getAttribute()`), but some cases may require interacting with Attr instances (e.g., `Element.getAttributeNode()`)."», object«Attr, extends«Node», localName«String, get», name«String, get», namespaceURI«?«String», get», ownerElement«?«Element»», prefix«?«String», get», specified«Bool, get», value«String, get, set»», ---«"## Element


Element is the most general base class from which all element objects (i.e. objects that represent elements) in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element."», object«Element, extends«Node», attributes«NamedMap«Attr», get», childElementCount«Number, get», children«NamedCollection«Element», get», classList«DOMTokenList, get», className«string, get, set», clientLeft«Number, get», clientTop«Number, get», clientHeight«Number, get», clientWidth«Number, get», firstElementChild«?«Element», get», id«String, get», innerHTML«String, get, set», innerText«String, get, set», lastElementChild«?«Element», get», localName«String, get», namespaceURI«?«string», get», nextElementSibling«?«Element»», outerHTML«String, get, set», part«DOMTokenList, get», prefix«String, get, set», previousElementSibling«?«Element»», scrollHeight«Number, get», scrollWidth«Number, get», scrollLeft«Number, get, set», scrollTop«Number, get, set», slot«?«String», get», tagName«String, get», after«->«...«Node», Unit»», append«->«...«Node», Unit»», setAttribute«->«String, String, Unit»»», object«InputElement, extends«Element», value«String, get, set»», data«ElemAttr, |«.attr«String, String», .event«String, EventListener«Element»»»», object«Document, body«Element»», object«Window, alert«->«String, Unit»»»», const«document_position_disconnected«1», document_position_preceding«2», document_position_following«4», document_position_contains«8», document_position_contained_by«16», document_position_implementation_specific«32»», instance«Indexed«CollectionBase, @length«->>«coll, CollectionBase:«.length«coll»»»», @«->>«coll, i, CollectionBase:«.item«coll, i»»»»»», define«_window«Window, asm«`window`»», _body«Element, asm«`document.body`»», _createElement«->>«String, Element», ->>«name, asm«`document.createElement(`, name, `)`»»», _createTextNode«->>«text, asm«`document.createTextNode(`, text, `)`»»», setElemAttrs«->«Element, [«ElemAttr», Unit», ->«element, attributes, @traverse«attributes, ->>«attr, i, match«attr, |«.attr«name, value», Element:«.setAttribute«element, name, value»»», |«.event«ev, listen», Element:«.addEventListener«element, ev, listen»»»»»»»», elem«->«String, [«ElemAttr», [«Element», Element», ->«name, attrs, children, do«let«res, _createElement«name»», setElemAttrs«res, attrs», Element:«.append«res, ...«_cast«children, Element:«>Node»»»»», res»»», textElem«->«name, attrs, text, do«let«res, _createElement«name»», setElemAttrs«res, attrs», Element:«.textContent.set«res, text»», res»»»»»