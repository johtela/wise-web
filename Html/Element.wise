Html/Element«import«Html/Collection, Html/Event», ---«"# Nodes and Elements

This module defines the Node and Element types in DOM. These act as a direct interface to DOM for Wise programs."», type«---«"## Node

The DOM Node interface is an abstract base class upon which many other DOM API objects are based, thus letting those object types to be used similarly and often interchangeably. As an abstract class, there is no such thing as a plain Node object. All objects that implement Node functionality are based on one of its subclasses. Most notable are Document, Element, and DocumentFragment."», object«Node, extends«EventTarget», baseURI«String, get», childNodes«NodeList«Node», get», firstChild«?«Node», get», isConnected«Bool, get», lastChild«?«Node», get», nextSibling«?«Node», get», nodeName«String, get», nodeType«Number, get», nodeValue«?«String», get, set», ownerDocument«?«Document», get», parentNode«?«Node», get», parentElement«?«Element», get», previousSibling«?«Node», get», textContent«?«String», get, set», appendChild«->«Node, Node»», cloneNode«->«Bool, Node»», compareDocumentPosition«->«Node, Number»», contains«->«Node, Bool»», getRootNode«->«{«composed«Bool»», ?«Node»»», hasChildNodes«Bool», insertBefore«->«Node, Node, Node»», isDefaultNamespace«->«String, Bool»», isEqualNode«->«Node, Bool»», isSameNode«->«Node, Bool»», lookupPrefix«->«String, ?«String»»», lookupNamespaceURI«->«String, ?«String»»», normalize«Unit», removeChild«->«Node, Node»», replaceChild«->«Node, Node, Node»»», ---«"## Attr

The Attr interface represents one of an element's attributes as an object. In most situations, you will directly retrieve the attribute value as a string (e.g., `Element.getAttribute()`), but some cases may require interacting with Attr instances (e.g., `Element.getAttributeNode()`)."», object«Attr, extends«Node», localName«String, get», name«String, get», namespaceURI«?«String», get», ownerElement«?«Element»», prefix«?«String», get», specified«Bool, get», value«String, get, set»», ---«"## DOMRect

A DOMRect describes the size and position of a rectangle.

The type of box represented by the DOMRect is specified by the method or property that returned it. For example, `Range.getBoundingClientRect()` specifies the rectangle that bounds the content of the range using such objects."», object«DOMRect, x«Number», y«Number», width«Number», height«Number»», ---«"## Element


Element is the most general base class from which all element objects (i.e. objects that represent elements) in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element."», object«Element, extends«Node», attributes«NamedMap«Attr», get», childElementCount«Number, get», children«NamedCollection«Element», get», classList«DOMTokenList, get», className«string, get, set», clientLeft«Number, get», clientTop«Number, get», clientHeight«Number, get», clientWidth«Number, get», firstElementChild«?«Element», get», id«String, get», innerHTML«String, get, set», innerText«String, get, set», lastElementChild«?«Element», get», localName«String, get», namespaceURI«?«string», get», nextElementSibling«?«Element»», outerHTML«String, get, set», part«DOMTokenList, get», prefix«String, get, set», previousElementSibling«?«Element»», scrollHeight«Number, get», scrollWidth«Number, get», scrollLeft«Number, get, set», scrollTop«Number, get, set», slot«?«String», get», tagName«String, get», after«->«...«Node», Unit»», append«->«...«Node», Unit»», before«->«...«Node», Unit»», checkVisibility«->«?«{«contentVisibilityAuto«Bool», opacityProperty«Bool», visibilityProperty«Bool»»», Bool»», closest«->«String, ?«Element»»», getAttribute«->«String, ?«String»»», getAttributeNames«[«String»», getAttributeNode«->«String, ?«Attr»»», getAttributeNodeNS«->«String, String, ?«Attr»»», getAttributeNS«->«String, String, ?«String»»», getBoundingClientRect«DOMRect», getClientRects«CollectionBase«DOMRect»», getElementsByClassName«->«String, NamedCollection«Element»»», getElementsByTagName«->«String, NamedCollection«Element»»», getElementsByTagNameNS«->«String, String, NamedCollection«Element»»», getHTML«String», hasAttribute«->«String, Bool»», hasAttributeNS«->«String, String, Bool»», hasAttributes«Bool», hasPointerCapture«->«Number, Bool»», insertAdjacentElement«->«String, Element, Element»», insertAdjacentHTML«->«String, String, Unit»», insertAdjacentText«->«String, String, Unit»», matches«->«String, Bool»», prepend«->«...«Node», Unit»», querySelector«->«String, Element»», querySelectorAll«->«String, NodeList«Element»»», releasePointerCapture«->«Number, Unit»», remove«Unit», removeAttribute«->«String, Unit»», removeAttributeNode«->«Attr, Attr»», removeAttributeNS«->«String, String, Unit»», replaceChilren«->«...«Node», Unit»», replaceWith«->«...«Node», Unit»», scroll«->«{«top«Number», left«Number», behavior«String»», Unit»», scrollBy«->«{«top«Number», left«Number», behavior«String»», Unit»», scrollIntoView«->«{«behavior«String», block«String», inline«String»», Unit»», scrollTo«->«{«top«Number», left«Number», behavior«String»», Unit»», setAttribute«->«String, String, Unit»», setAttributeNode«->«Attr, Attr»», setAttributeNodeNS«->«Attr, Attr»», setAttributeNS«->«String, String, String, Unit»», setPointerCapture«->«Number, Unit»», toggleAttribute«->«String, Bool»», onbeforeinput«EventListener«InputEvent«Element»», get, set», onblur«EventListener«FocusEvent«Element»», get, set», onclick«EventListener«MouseEvent«Element»», get, set», oncontextmenu«EventListener«MouseEvent«Element»», get, set», oncopy«EventListener«ClipboardEvent«Element»», get, set», oncut«EventListener«ClipboardEvent«Element»», get, set», ondblclick«EventListener«MouseEvent«Element»», get, set», onfocus«EventListener«FocusEvent«Element»», get, set», ongotpointercapture«EventListener«MouseEvent«Element»», get, set», oninput«EventListener«InputEvent«Element»», get, set», onkeydown«EventListener«KeyboardEvent«Element»», get, set», onkeyup«EventListener«KeyboardEvent«Element»», get, set», onlostpointercapture«EventListener«MouseEvent«Element»», get, set», onmousedown«EventListener«MouseEvent«Element»», get, set», onmouseenter«EventListener«MouseEvent«Element»», get, set», onmouseleave«EventListener«MouseEvent«Element»», get, set», onmousemove«EventListener«MouseEvent«Element»», get, set», onmouseout«EventListener«MouseEvent«Element»», get, set», onmouseover«EventListener«MouseEvent«Element»», get, set», onmouseup«EventListener«MouseEvent«Element»», get, set», onpaste«EventListener«ClipboardEvent«Element»», get, set», onscroll«EventListener«Event«Element»», get, set», onwheel«EventListener«WheelEvent«Element»», get, set»», object«InputElement, extends«Element», value«String, get, set»», data«ElemAttr, |«.attr«String, String», .event«String, EventListener«Element»»»», object«Document, body«Element»», object«Window, alert«->«String, Unit»»»», define«_DOCUMENT_POSITION_DISCONNECTED«1», _DOCUMENT_POSITION_PRECEDING«2», _DOCUMENT_POSITION_FOLLOWING«4», _DOCUMENT_POSITION_CONTAINS«8», _DOCUMENT_POSITION_CONTAINED_BY«16», _DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC«32»», define«_window«Window, asm«`window`»», _body«Element, asm«`document.body`»», _createElement«->>«String, Element», ->>«name, asm«`document.createElement(`, name, `)`»»», _createTextNode«->>«text, asm«`document.createTextNode(`, text, `)`»»», setElemAttrs«->«Element, [«ElemAttr», Unit», ->«element, attributes, @traverse«attributes, ->>«attr, i, match«attr, |«.attr«name, value», Element:«.setAttribute«element, name, value»»», |«.event«ev, listen», Element:«.addEventListener«element, ev, listen»»»»»»»», elem«->«String, [«ElemAttr», [«Element», Element», ->«name, attrs, children, do«let«res, _createElement«name»», setElemAttrs«res, attrs», Element:«.append«res, ...«_cast«children, Element:«>Node»»»»», res»»», textElem«->«name, attrs, text, do«let«res, _createElement«name»», setElemAttrs«res, attrs», Element:«.textContent.set«res, text»», res»»»»»