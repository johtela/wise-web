Html/VirtualDom«import«Math/Arith¸ Html/Document»¸ type«data«VAttr¸ |«<attr>«String¸ String»¸ <event>«String¸ EventListener«Element»»»»¸ data«VNode¸ |«<vtext>«String»¸ <velem>«String¸ [«VAttr»¸ [«VNode»»»»»¸ template«vnodemac«"<"¸ 'tag¸ ">"¸ ->>«attr¸ "#>#"¸ "  "¸ children¸ <velem>«'tag¸ attr¸ children»»»¸ vattrmac«": "¸ 'attr¸ ->>«" = "¸ val¸ <attr>«'attr¸ val»»»»¸ define«showVAttr«->«vattr¸ match«vattr¸ |«<attr>«name¸ val»¸ _concat«[«" "¸ name¸ "="""¸ val¸ """"»»»¸ |«<event>«name¸ val»¸ _concat«[«" "¸ name¸ "="""¸ .toString«val»¸ """"»»»»»»¸ showVNode«->«vnode¸ match«vnode¸ |«<vtext>«text»¸ text»¸ |«<velem>«tag¸ attrs¸ children»¸ _concat«[«"<"¸ tag¸ @join«_map«attrs¸ showVAttr»¸ ""»¸ "/>"»»»»»»¸ <a«vnodemac«"a"»»¸ <br>«<velem>«"br"¸ [¸ [»»¸ <b«vnodemac«"b"»»¸ <button«vnodemac«"button"»»¸ <canvas«vnodemac«"canvas"»»¸ <caption«vnodemac«"caption"»»¸ <cite«vnodemac«"cite"»»¸ <code«vnodemac«"code"»»¸ <em«vnodemac«"em"»»¸ <div«vnodemac«"div"»»¸ <dl«vnodemac«"dl"»»¸ <dt«vnodemac«"dt"»»¸ <dd«vnodemac«"dd"»»¸ <details«vnodemac«"details"»»¸ <input«vnodemac«"input"»»¸ <p«vnodemac«"p"»»¸ <span«vnodemac«"span"»»¸ :class«vattrmac«"class"»»¸ :id«vattrmac«"id"»»¸ :href«vattrmac«"href"»»¸ :onclick«vattrmac«"onclick"»»¸ :style«vattrmac«"style"»»¸ :type«vattrmac«"type"»»¸ :text«<vtext>»»¸ instance«Show«VAttr¸ _show«->>«a¸ showVAttr«a»»»»¸ Show«VNode¸ _show«->>«n¸ showVNode«n»»»»»¸ define«_newElem«->>«String¸ Element»¸ ->>«"<"¸ name¸ ">"¸ Document:«.createElement«_document¸ name»»»»¸ _textNode«->>«"<"¸ text¸ ">"¸ Document:«.createTextNode«_document¸ text»»»»¸ .getVNodeKey«->>«Node¸ ?«String»»¸ ->>«node¸ asm«node¸ `.__vnode`»»»¸ .setVNodeKey«->>«Node¸ String¸ Unit»¸ ->>«node¸ key¸ asm«node¸ `.__vnode = `¸ key»»»¸ setVAttrs«->«Element¸ [«VAttr»¸ Unit»¸ ->«element¸ attributes¸ @traverse«attributes¸ ->>«attr¸ _¸ match«attr¸ |«<attr>«name¸ value»¸ Element:«.setAttribute«element¸ name¸ value»»»¸ |«<event>«ev¸ listen»¸ Element:«.addEventListener«element¸ ev¸ listen»»»»»»»»¸ realizeVNode«->«VNode¸ String¸ Node»¸ ->«vnode¸ key¸ do«let«node¸ match«vnode¸ |«<vtext>«txt»¸ Text:«>Node«_textNode«txt»»»»¸ |«<velem>«name¸ attrs¸ _»¸ do«let«elem¸ _newElem«name»»¸ setVAttrs«elem¸ attrs»¸ Element:«>Node«elem»»»»»»¸ .setVNodeKey«node¸ key»¸ node»»»¸ updateChildren«->«Element¸ [«VNode»¸ Unit»¸ ->«parent¸ vnodes¸ do«let«children¸ Element:«.childNodes«parent»»»¸ let«existing¸ :group«children¸ .getVNodeKey»»¸ @traverse«vnodes¸ ->>«vnode¸ i¸ do«let«key¸ _show«vnode»»¸ let«exist¸ :get«existing¸ key»»¸ let«node¸ match«exist¸ |«?«queue»¸ >«@length«queue»¸ 0»¸ Element:«.insertBefore«parent¸ Array:«.shift«queue»»¸ @«children¸ i»»»»¸ |«_¸ Element:«.appendChild«parent¸ realizeVNode«vnode¸ key»»»»»»¸ match«vnode¸ |«<velem>«_¸ _¸ childVNodes»¸ updateChildren«Element:«<Node«node»»¸ childVNodes»»¸ |«_¸ ()»»»»»¸ set«i¸ @length«children»»¸ let«len¸ @length«vnodes»»¸ while«>=«--«i»¸ len»¸ _ignore«Element:«.removeChild«parent¸ @«children¸ ^«i»»»»»»»»»¸ updateDom«->«Element¸ VNode¸ Unit»¸ ->«root¸ vnode¸ match«vnode¸ |«<velem>«_¸ _¸ childVNodes»¸ do«let«key¸ _show«vnode»»¸ let«elem¸ match«.getVNodeKey«Element:«>Node«root»»»¸ |«?«rootKey»¸ ==«rootKey¸ key»¸ root»¸ |«_¸ Element:«<Node«realizeVNode«vnode¸ key»»»»»»¸ updateChildren«elem¸ childVNodes»¸ if«!==«elem¸ root»¸ Element:«.replaceWith«root¸ ...«[«Element:«>Node«elem»»»»»»»»»¸ |«_¸ throw«"Root must be an element"»»»»»¸ renderDom«->«VNode¸ Element»¸ ->«vnode¸ do«let«key¸ _show«vnode»»¸ let«root¸ Element:«<Node«realizeVNode«vnode¸ key»»»»¸ updateDom«root¸ vnode»¸ root»»»»¸ define«tust«renderDom«<span«[«:style«"color: green;"»¸ :id«"foo"»»¸ [«<span«[«:id«"bar"»»¸ [«:text«"Hello"»»»»»»»»»