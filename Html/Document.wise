Html/Document«import«Html/Input¸ Css/Font¸ Css/Style»¸ type«---«"## DocumentType

The DocumentType interface represents a Node containing a doctype."»¸ object«DocumentType¸ extends«Node»¸ name«String¸ get»¸ publicId«String¸ get»¸ systemId«String¸ get»¸ after«->«...«Node»¸ Unit»»¸ before«->«...«Node»¸ Unit»»¸ remove«Unit»¸ replaceWith«->«...«Node»¸ Unit»»»¸ ---«"## DOMImplementation

The DOMImplementation interface represents an object providing methods which are not dependent on any particular document. Such an object is returned by the `Document.implementation` property."»¸ object«DOMImplementation¸ createDocument«->«?«String»¸ ?«String»¸ ?«DocumentType»¸ XMLDocument»»¸ createDocumentType«->«String¸ String¸ String¸ DocumentType»»¸ createHTMLDocument«->«?«String»¸ Document»»»¸ ---«"## Location

The Location interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location¸ accessible `Document.location` and `Window.location` respectively."»¸ object«Location¸ ancestorOrigins«DOMStringList¸ get»¸ href«String¸ get¸ set»¸ protocol«String¸ get¸ set»¸ host«String¸ get¸ set»¸ hostName«String¸ get¸ set»¸ port«String¸ get¸ set»¸ pathName«String¸ get¸ set»¸ search«String¸ get¸ set»¸ hash«String¸ get¸ set»¸ origin«String¸ get»¸ assign«->«String¸ Unit»»¸ reload«Unit»¸ replace«->«String¸ Unit»»¸ toString«String»»¸ ---«"## XPathExpression

This interface is a compiled XPath expression that can be evaluated on a document or specific node to return information from its DOM tree.

This is useful when an expression will be reused in an application, because it is just compiled once and all namespace prefixes which occur within the expression are preresolved."»¸ object«XPathExpression¸ evaluate«->«Node¸ String¸ XPathResult»»»¸ ---«"## XPathResult

The XPathResult interface represents the results generated by evaluating an XPath expression within the context of a given node.

Since XPath expressions can result in a variety of result types, this interface makes it possible to determine and handle the type and value of the result."»¸ object«XPathResult¸ booleanValue«Bool¸ get»¸ invalidIteratorState«Bool¸ get»¸ numberValue«Number¸ get»¸ resultType«Number¸ get»¸ singleNodeValue«Node¸ get»¸ snapshotLength«Number¸ get»¸ stringValue«String¸ get»¸ iterateNext«?«Node»»¸ snapshotItem«->«Number¸ ?«Node»»»¸ ANY_TYPE«Number¸ get»¸ NUMBER_TYPE«Number¸ get»¸ STRING_TYPE«Number¸ get»¸ BOOLEAN_TYPE«Number¸ get»¸ UNORDERED_NODE_ITERATOR_TYPE«Number¸ get»¸ ORDERED_NODE_ITERATOR_TYPE«Number¸ get»¸ UNORDERED_NODE_SNAPSHOT_TYPE«Number¸ get»¸ ORDERED_NODE_SNAPSHOT_TYPE«Number¸ get»¸ ANY_UNORDERED_NODE_TYPE«Number¸ get»¸ FIRST_ORDERED_NODE_TYPE«Number¸ get»»¸ ---«"## AbstractRange

The AbstractRange abstract interface is the base class upon which all DOM range types are defined. A range is an object that indicates the start and end points of a section of content within the document."»¸ object«AbstractRange¸ collapsed«Bool¸ get»¸ endContainer«Node¸ get»¸ endOffset«Number¸ get»¸ startContainer«Node¸ get»¸ startOffset«Number¸ get»»¸ ---«"## Range

The Range interface represents a fragment of a document that can contain nodes and parts of text nodes.

A range can be created by using the `Document.createRange()` method. Range objects can also be retrieved by using the `getRangeAt()` method of the Selection object or the `caretRangeFromPoint()` method of the Document object."»¸ object«Range¸ extends«AbstractRange»¸ commonAncestorContainer«Node¸ get»¸ cloneContents«DocumentFragment»¸ cloneRange«Range»¸ collapse«->«Bool¸ Unit»»¸ compareBoundaryPoints«->«Number¸ Range¸ Number»»¸ comparePoint«->«Node¸ Number¸ Number»»¸ createContextualFragment«->«String¸ DocumentFragment»»¸ deleteContents«Unit»¸ extractContents«DocumentFragment»¸ getBoundingClientRect«DOMRect»¸ getClientRects«Iterable«DOMRect»»¸ insertNode«->«Node¸ Unit»»¸ intersectsNode«->«Node¸ Bool»»¸ isPointInRange«->«Node¸ Number¸ Bool»»¸ selectNode«->«Node¸ Unit»»¸ selectNodeContents«->«Node¸ Unit»»¸ setEnd«->«Node¸ Number¸ Unit»»¸ setEndAfter«->«Node¸ Unit»»¸ setEndBefore«->«Node¸ Unit»»¸ setStart«->«Node¸ Number¸ Unit»»¸ setStartAfter«->«Node¸ Unit»»¸ setStartBefore«->«Node¸ Unit»»¸ surroundContents«->«Node¸ Unit»»¸ toString«String»»¸ ---«"## Selection

A Selection object represents the range of text selected by the user or the current position of the caret. Each document is associated with a unique selection object, which can be retrieved by `document.getSelection()` or `window.getSelection()` and then be examined and modified.

A user may make a selection from left to right (in document order) or right to left (reverse of document order). The anchor is where the user began the selection and the focus is where the user ends the selection. If you make a selection with a desktop mouse, the anchor is placed where you pressed the mouse button, and the focus is placed where you released the mouse button."»¸ object«Selection¸ anchorNode«?«Node»¸ get»¸ anchorOffset«Number¸ get»¸ direction«String¸ get»¸ focusNode«?«Node»¸ get»¸ focusOffset«Number¸ get»¸ isCollapsed«Bool¸ get»¸ rangeCount«Number¸ get»¸ type«String¸ get»¸ addRange«->«Range¸ Unit»»¸ collapse«->«Node¸ ?«Number»¸ Unit»»¸ collapseToEnd«Unit»¸ collapseToStart«Unit»¸ containsNode«->«Node¸ Bool¸ Bool»»¸ deleteFromDocument«Unit»¸ empty«Unit»¸ extend«->«Node¸ Number¸ Unit»»¸ getRangeAt«->«Number¸ Range»»¸ modify«->«String¸ String¸ String¸ Unit»»¸ removeAllRanges«Unit»¸ removeRange«->«Range¸ Unit»»¸ selectAllChildren«->«Node¸ Unit»»¸ setBaseAndExtent«->«Node¸ Number¸ Node¸ Number¸ Unit»»¸ setPosition«->«Node¸ Number¸ Unit»»¸ toString«String»»¸ ---«"## DocumentFragment

The DocumentFragment interface represents a minimal document object that has no parent.

It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is due to the fact that the document fragment isn't part of the active document tree structure. Changes made to the fragment don't affect the document."»¸ object«DocumentFragment¸ extends«Node»¸ childElementCount«Number¸ get»¸ children«NamedCollection«Element»¸ get»¸ firstElementChild«?«Element»¸ get»¸ lastElementChild«?«Element»¸ get»¸ append«->«...«Node»¸ Unit»»¸ prepend«->«...«Node»¸ Unit»»¸ querySelector«->«String¸ ?«Element»»»¸ querySelectorAll«->«String¸ NodeList«Element»»»¸ replaceChildren«->«...«Node»¸ Unit»»»¸ ---«"## Document

The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.

The DOM tree includes elements such as `<body>` and `<table>`, among many others. It provides functionality globally to the document, like how to obtain the page's URL and create new elements in the document."»¸ object«Document¸ activeElement«Element¸ get»¸ adoptedStyleSheets«[«CSSStyleSheet»»¸ body«HTMLBodyElement»¸ charSet«String¸ get»¸ childElementCount«Number¸ get»¸ children«NamedCollection«Element»¸ get»¸ compatMode«String¸ get»¸ contentType«String¸ get»¸ cookie«String¸ get¸ set»¸ currentScript«?«HTMLScriptElement»¸ get»¸ defaultView«Window¸ get»¸ designMode«String¸ get¸ set»¸ dir«String¸ get¸ set»¸ docType«?«DocumentType»¸ get»¸ documentElement«Element¸ get»¸ documentURI«String¸ get»¸ embeds«NamedCollection«Element»»¸ firstElementChild«?«Element»¸ get»¸ fonts«FontFaceSet¸ get»¸ forms«NamedCollection«HTMLFormElement»¸ get»¸ fragmentDirective«?«FragmentDirective»¸ get»¸ fullScreenElement«?«Element»¸ get»¸ fullScreenEnabled«Bool¸ get»¸ head«HTMLHeadElement¸ get»¸ hidden«Bool¸ get»¸ images«NamedCollection«HTMLImageElement»¸ get»¸ implementation«DOMImplementation¸ get»¸ lastElementChild«?«Element»¸ get»¸ lastModified«String¸ get»¸ links«NamedCollection«Element»¸ get»¸ location«Location¸ get»¸ plugins«NamedCollection«HTMLEmbedElement»¸ get»¸ pointerLockElement«?«Element»¸ get»¸ readyState«String¸ get»¸ referrer«String¸ get»¸ scripts«NamedCollection«HTMLScriptElement»¸ get»¸ scrollingElement«?«Element»¸ get»¸ styleSheets«StyleSheetList¸ get»¸ title«String¸ get¸ set»¸ URL«String¸ get»¸ visibilityState«String¸ get»¸ parseHTMLUnsafe«->«String¸ Document»¸ static»¸ adoptNode«->«Node¸ Node»»¸ append«->«...«Node»¸ Unit»»¸ close«Unit»¸ createAttribute«->«String¸ Attr»»¸ createAttributeNS«->«String¸ String¸ Attr»»¸ createCDATASection«->«String¸ CDATASection»»¸ createComment«->«String¸ Comment»»¸ createDocumentFragment«DocumentFragment»¸ createElement«->«String¸ Element»»¸ createElementNS«->«String¸ String¸ Element»»¸ createExpression«->«String¸ ->«String¸ ?«String»»¸ XPathExpression»»¸ createRange«Range»¸ createTextNode«->«String¸ Text»»¸ elementFromPoint«->«Number¸ Number¸ ?«Element»»»¸ elementsFromPoint«->«Number¸ Number¸ [«Element»»»¸ evaluate«->«XPathExpression¸ Node¸ ->«String¸ ?«String»»¸ Number¸ ?«XPathResult»¸ XPathResult»»¸ exitPointerLock«Unit»¸ getElementById«->«String¸ ?«Element»»»¸ getElementsByClassName«->«String¸ NamedCollection«Element»»»¸ getElementsByName«->«String¸ NodeList«Element»»»¸ getElementsByTagName«->«String¸ NamedCollection«Element»»»¸ getElementsByTagNameNS«->«String¸ String¸ NamedCollection«Element»»»¸ getSelection«Selection»¸ hasFocus«Bool»¸ hasStorageAccess«Promise«Bool»»¸ importNode«->«Node¸ Bool¸ Node»»¸ open«Document»¸ prepend«->«...«Node»¸ Unit»»¸ querySelector«->«String¸ ?«Element»»»¸ querySelectorAll«->«String¸ NodeList«Element»»»¸ replaceChildren«->«...«Node»¸ Unit»»¸ oncopy«EventListener«ClipboardEvent«Document»»»¸ oncut«EventListener«ClipboardEvent«Document»»»¸ onfullscreenchange«EventListener«Event«Document»»»¸ onfullscreenerror«EventListener«Event«Document»»»¸ onpaste«EventListener«ClipboardEvent«Document»»»¸ onpointerlockchange«EventListener«Event«Document»»»¸ onpointerlockerror«EventListener«Event«Document»»»¸ onreadystatechange«EventListener«Event«Document»»»¸ onscroll«EventListener«Event«Document»»»¸ onscrollend«EventListener«Event«Document»»»¸ onsecuritypolicyviolation«EventListener«SecurityPolicyEvent«Document»»»¸ onselectionchange«EventListener«Event«Document»»»¸ onvisibilitychange«EventListener«Event«Document»»»»¸ object«XMLDocument¸ extends«Document»»¸ object«FragmentDirective»¸ object«Window¸ extends«EventTarget»»»¸ define«_document«Document¸ asm«`document`»»»»