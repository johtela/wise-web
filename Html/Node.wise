Html/Node«import«Data/Dictionary¸ Html/Collection¸ Html/Event»¸ type«---«"## Node

The DOM Node interface is an abstract base class upon which many other DOM API objects are based, thus letting those object types to be used similarly and often interchangeably. As an abstract class, there is no such thing as a plain Node object. All objects that implement Node functionality are based on one of its subclasses. Most notable are Document, Element, and DocumentFragment."»¸ object«Node¸ extends«EventTarget»¸ ELEMENT_NODE«Number¸ get¸ static»¸ ATTRIBUTE_NODE«Number¸ get¸ static»¸ TEXT_NODE«Number¸ get¸ static»¸ CDATA_SECTION_NODE«Number¸ get¸ static»¸ PROCESSING_INSTRUCTION_NODE«Number¸ get¸ static»¸ COMMENT_NODE«Number¸ get¸ static»¸ DOCUMENT_NODE«Number¸ get¸ static»¸ DOCUMENT_TYPE_NODE«Number¸ get¸ static»¸ DOCUMENT_FRAGMENT_NODE«Number¸ get¸ static»¸ DOCUMENT_POSITION_DISCONNECTED«Number¸ get¸ static»¸ DOCUMENT_POSITION_PRECEDING«Number¸ get¸ static»¸ DOCUMENT_POSITION_FOLLOWING«Number¸ get¸ static»¸ DOCUMENT_POSITION_CONTAINS«Number¸ get¸ static»¸ DOCUMENT_POSITION_CONTAINED_BY«Number¸ get¸ static»¸ DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC«Number¸ get¸ static»¸ baseURI«String¸ get»¸ childNodes«NodeList«Node»¸ get»¸ firstChild«?«Node»¸ get»¸ isConnected«Bool¸ get»¸ lastChild«?«Node»¸ get»¸ nextSibling«?«Node»¸ get»¸ nodeName«String¸ get»¸ nodeType«Number¸ get»¸ nodeValue«?«String»¸ get¸ set»¸ ownerDocument«?«Document»¸ get»¸ parentNode«?«Node»¸ get»¸ parentElement«?«Element»¸ get»¸ previousSibling«?«Node»¸ get»¸ textContent«?«String»¸ get¸ set»¸ appendChild«->«Node¸ Node»»¸ cloneNode«->«Bool¸ Node»»¸ compareDocumentPosition«->«Node¸ Number»»¸ contains«->«Node¸ Bool»»¸ getRootNode«->«{«composed«Bool»»¸ ?«Node»»»¸ hasChildNodes«Bool»¸ insertBefore«->«Node¸ Node¸ Node»»¸ isDefaultNamespace«->«String¸ Bool»»¸ isEqualNode«->«Node¸ Bool»»¸ isSameNode«->«Node¸ Bool»»¸ lookupPrefix«->«String¸ ?«String»»»¸ lookupNamespaceURI«->«String¸ ?«String»»»¸ normalize«Unit»¸ removeChild«->«Node¸ Node»»¸ replaceChild«->«Node¸ Node¸ Node»»»¸ ---«"## CharacterData

The CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any objects of type CharacterData; it is implemented by other interfaces like Text, Comment, CDATASection, or ProcessingInstruction, which aren't abstract."»¸ object«CharacterData¸ extends«Node»¸ data«String¸ get¸ set»¸ length«Number¸ get»¸ nextElementSibling«?«Element»¸ get»¸ previousElementSibling«?«Element»¸ get»¸ after«->«...«Node»¸ Unit»»¸ appendData«->«String¸ Unit»»¸ before«->«...«Node»¸ Unit»»¸ deleteData«->«Number¸ Number¸ Unit»»¸ insertData«->«Number¸ Number¸ Unit»»¸ remove«Unit»¸ replaceData«->«Number¸ Number¸ String¸ Unit»»¸ replaceWith«->«...«Node»¸ Unit»»¸ substringData«->«Number¸ Number¸ String»»»¸ ---«"## Text

The Text interface represents a text node in a DOM tree."»¸ object«Text¸ extends«CharacterData»¸ wholeText«String¸ get»¸ splitText«->«Number¸ Text»»»¸ ---«"## CDATASection

The CDATASection interface represents a CDATA section that can be used within XML to include extended portions of unescaped text. When inside a CDATA section, the symbols `<` and `&` don't need escaping as they normally do."»¸ object«CDATASection¸ extends«Text»»¸ ---«"## Comment

The Comment interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view.

Comments are represented in HTML and XML as content between `<!--` and `-->`. In XML, like inside SVG or MathML markup, the character sequence `--` cannot be used within a comment."»¸ object«Comment¸ extends«CharacterData»»¸ ---«"Document and Element objects are declared here but their members are defined in their own modules."»¸ object«Document¸ extends«Node»»¸ object«Element¸ extends«Node»»»»