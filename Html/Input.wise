Html/Input«import«Lang/Date¸ Html/Element»¸ "# Input and Form Elements

Definitions for HTML inputs, forms, and related elements."¸ type«"## Input Element

The HTMLInputElement interface provides special properties and methods for manipulating the options, layout, and presentation of `<input>` elements."¸ object«HTMLInputElement¸ extends«HTMLElement»¸ accept«String¸ get¸ set»¸ alt«String¸ get¸ set»¸ autocomplete«String¸ get¸ set»¸ checked«Bool¸ get¸ set»¸ defaultChecked«Bool¸ get¸ set»¸ defaultValue«String¸ get¸ set»¸ disabled«Bool¸ get¸ set»¸ form«?«HTMLFormElement»¸ get»¸ formAction«String¸ get¸ set»¸ formEnctype«String¸ get¸ set»¸ formMethod«String¸ get¸ set»¸ formNoValidate«Bool¸ get¸ set»¸ formTarget«String¸ get¸ set»¸ height«Number¸ get¸ set»¸ indeterminate«Bool¸ get¸ set»¸ labels«NodeList«HTMLLabelElement»¸ get»¸ list«?«HTMLDataListElement»¸ get»¸ max«String¸ get¸ set»¸ maxLength«Number¸ get¸ set»¸ min«String¸ get¸ set»¸ minLength«Number¸ get¸ set»¸ multiple«Number¸ get¸ set»¸ name«String¸ get¸ set»¸ pattern«String¸ get¸ set»¸ placeholder«String¸ get¸ set»¸ popopeverTargetAction«String¸ get¸ set»¸ popoverTargetElement«Element¸ get¸ set»¸ readOnly«Bool¸ get¸ set»¸ required«Bool¸ get¸ set»¸ selectionDirection«String¸ get¸ set»¸ selectionEnd«Number¸ get¸ set»¸ selectionStart«Number¸ get¸ set»¸ size«Number¸ get¸ set»¸ src«String¸ get¸ set»¸ step«String¸ get¸ set»¸ type«String¸ get¸ set»¸ validationMessage«String¸ get»¸ validity«ValidityState¸ get»¸ value«String¸ get¸ set»¸ valueAsDate«?«Date»¸ get¸ set»¸ valueAsNumber«?«Number»¸ get¸ set»¸ width«Number¸ get¸ set»¸ willValidate«Bool¸ get»¸ checkValidity«Bool»¸ reportValidity«Bool»¸ select«Unit»¸ setCustomValidity«->«String¸ Unit»»¸ setRangeText«->«String¸ ?«Number»¸ ?«Number»¸ ?«String»¸ Unit»»¸ setSelectionRange«->«Number¸ Number¸ ?«String»¸ Unit»»¸ stepDown«->«?«Number»¸ Unit»»¸ stepUp«->«?«Number»¸ Unit»»¸ oncancel«EventListener«Event«HTMLInputElement»»¸ get¸ set»¸ oninvalid«EventListener«Event«HTMLInputElement»»¸ get¸ set»¸ onselect«EventListener«Event«HTMLInputElement»»¸ get¸ set»»¸ "## Form

The HTMLFormElement interface represents a `<form>` element in the DOM. It allows access to — and, in some cases, modification of — aspects of the form, as well as access to its component elements."¸ object«HTMLFormElement¸ extends«HTMLElement»¸ acceptCharset«String¸ get¸ set»¸ action«String¸ get¸ set»¸ autocomplete«String¸ get¸ set»¸ elements«NamedCollection«Element»¸ get»¸ encoding«String¸ get¸ set»¸ enctype«String¸ get¸ set»¸ length«Number¸ get»¸ method«String¸ get¸ set»¸ name«String¸ get¸ set»¸ noValidate«Bool¸ get¸ set»¸ target«String¸ get¸ set»¸ checkValidity«Bool»¸ reportValidity«Bool»¸ requestSubmit«Unit»¸ reset«Unit»¸ submit«Unit»¸ onformdata«EventListener«FormDataEvent«HTMLFormElement»»»¸ onreset«EventListener«Event«HTMLFormElement»»»¸ onsubmit«EventListener«Event«HTMLFormElement»»»»¸ "## Label

The HTMLLabelElement interface gives access to properties specific to `<label>` elements. It inherits methods and properties from the base HTMLElement interface."¸ object«HTMLLabelElement¸ extends«HTMLElement»¸ control«?«HTMLElement»¸ get»¸ form«?«HTMLFormElement»¸ get»¸ for«?«String»¸ get¸ set»»¸ "## Data List

The HTMLDataListElement interface provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate `<datalist>` elements and their content."¸ object«HTMLOptionElement¸ extends«HTMLElement»¸ defaultSelected«Bool¸ get¸ set»¸ disabled«Bool¸ get¸ set»¸ form«?«HTMLFormElement»¸ get»¸ index«Number¸ get¸ set»¸ label«String¸ get¸ set»¸ selected«Bool¸ get¸ set»¸ text«String¸ get¸ set»¸ value«String¸ get¸ set»»¸ object«HTMLDataListElement¸ extends«HTMLElement»¸ options«NamedCollection«HTMLOptionElement»¸ get»»¸ "## Validity State

The ValidityState interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid."¸ object«ValidityState¸ badInput«Bool¸ get»¸ customError«Bool¸ get»¸ patternMismatch«Bool¸ get»¸ rangeOverflow«Bool¸ get»¸ rangeUnderflow«Bool¸ get»¸ stepMismatch«Bool¸ get»¸ tooLong«Bool¸ get»¸ tooShort«Bool¸ get»¸ typeMismatch«Bool¸ get»¸ valid«Bool¸ get»¸ valueMissing«Bool¸ get»»»»